// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String      @id @default(cuid())
  name            String?
  email           String?     @unique
  password        String?
  dateOfBirth     DateTime?
  emailVerified   DateTime?
  image           String?
  role            String      @default("user")
  createdProducts Product[]
  accounts        Account[]
  sessions        Session[]
  OrderItem       OrderItem[]
  Order           Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String      @id @default(uuid())
  name        String
  price       Float
  colors      String[]
  description String?
  imageUrl    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  User        User        @relation(fields: [userId], references: [id])
  userId      String
  OrderItem   OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  productId String
  quantity  Int
  userId    String
  color     String
  orderId   String?
  Order     Order?  @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  status    Status[]    @default([PENDING])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  orderItem OrderItem[]
}

enum Status {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}
